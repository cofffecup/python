import random

def get_word():
    words_list = ['год', 'человек', 'время', 'дело', 'жизнь', 'день', 'рука', 
    'работа', 'слово', 'место', 'вопрос', 'лицо', 'глаз',
    'страна', 'друг', 'сторона', 'дом', 'случай', 'ребенок', 'голова',
    'система', 'вид', 'конец', 'отношение', 'город', 'часть', 'женщина',
    'проблема', 'земля', 'решение', 'власть', 'машина', 'закон', 'час',
    'образ', 'отец', 'история', 'нога', 'вода', 'война', 'возможность',
    'компания', 'результат', 'дверь', 'народ', 'область', 'число', 'голос',
    'развитие', 'группа', 'жена', 'процесс', 'условие', 'книга', 'ночь',
    'суд', 'деньга', 'уровень', 'начало', 'государство', 'стол', 'средство',
    'связь', 'имя', 'президент', 'форма', 'путь', 'организация', 'качество',
    'действие', 'статья', 'общество', 'ситуация', 'деятельность', 'школа',
    'душа', 'дорога', 'язык', 'взгляд', 'момент', 'минута', 'месяц',
    'порядок', 'цель', 'программа', 'муж', 'помощь', 'мысль', 'вечер', 'орган',
    'правительство', 'рынок', 'предприятие', 'партия', 'роль', 'смысл', 'мама',
    'мера', 'улица', 'состояние', 'задача', 'информация', 'театр', 'внимание',
    'производство', 'квартира', 'труд', 'тело', 'письмо', 'центр', 'утро',
    'мать', 'комната', 'семья', 'сын', 'смерть', 'положение', 'интерес',
    'федерация', 'век', 'идея', 'управление', 'автор', 'окно', 'ответ',
    'совет', 'разговор', 'мужчина', 'ряд', 'счет', 'мнение', 'цена', 'точка',
    'план', 'проект', 'глава', 'материал', 'основа', 'причина', 'движение',
    'культура', 'сердце', 'рубль', 'наука', 'документ', 'неделя', 'вещь',
    'чувство', 'правило', 'служба', 'газета', 'срок', 'институт', 'член',
    'ход', 'стена', 'директор', 'плечо', 'опыт', 'встреча', 'принцип',
    'событие', 'структура', 'количество', 'товарищ', 'создание', 'значение',
    'объект', 'гражданин', 'очередь', 'период', 'образование', 'состав',
    'пример', 'лес', 'исследование', 'девушка', 'данные', 'палец', 'судьба',
    'тип', 'метод', 'политика', 'армия', 'брат', 'представитель', 'борьба',
    'использование', 'шаг', 'игра', 'участие', 'территория', 'край', 'размер',
    'номер', 'район', 'население', 'банк', 'начальник', 'класс', 'зал',
    'изменение', 'большинство', 'характер', 'кровь', 'направление', 'позиция',
    'герой', 'течение', 'девочка', 'искусство', 'гость', 'воздух', 'мальчик',
    'фильм', 'договор', 'регион', 'выбор', 'свобода', 'врач', 'экономика',
    'небо', 'факт', 'церковь', 'завод', 'фирма', 'бизнес', 'союз', 'деньги',
    'специалист', 'род', 'команда', 'руководитель', 'спина', 'дух', 'музыка',
    'способ', 'хозяин', 'поле', 'доллар', 'память', 'природа', 'дерево',
    'оценка', 'объем', 'картина', 'процент', 'требование', 'писатель',
    'сцена', 'анализ', 'основание', 'повод', 'вариант', 'модель', 'степень']
    word = random.choice(words_list).upper()
    return [word, ['_' for _, _ in enumerate(word)]]

def display_hangman(tries):
    stages = ['''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / \\
                   -
                ''', 
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / 
                   -
                ''', 
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |      
                   -
                ''', 
                '''
                   --------
                   |      |
                   |      O
                   |     \\|
                   |      |
                   |     
                   -
                ''', 
                '''
                   --------
                   |      |
                   |      O
                   |      |
                   |      |
                   |     
                   -
                ''', 
                '''
                   --------
                   |      |
                   |      O
                   |    
                   |      
                   |     
                   -
                ''', 
                '''
                   --------
                   |      |
                   |      
                   |    
                   |      
                   |     
                   -
                ''', 
                '''
                   --------
                   |
                   |
                   |
                   |
                   |
                   -
                   ''', 
                '''
                   
                   |
                   |      
                   |    
                   |      
                   |     
                   -
                ''', 
                '''
                   
                   
                         
                       
                         
                        
                   -
                '''
    ]
    tries = tries if 0 <= tries <= 9 else 0 # защита от ошибки
    print(stages[tries])

def statistics(word, tries):
    print()
    display_hangman(tries)
    print(*word[1])
    print(f'\nДлина слова {len(word[0])}, отгаданных букв {sum([1 for i in word[1] if i.isalpha()])}.')
    print(f'Попыток: {tries}')

def input_answer(repiat_answer):
    while True:
        answer = input('Введите свой ответ (слово или букву):\n').strip().upper()
        if answer in repiat_answer:
            print('Такой символ уже был. Попробуйте снова.')
        elif answer.isalpha():
            return answer

def check_answer(word, answer, tries, repiat_answer):
    if answer in word[0]:
        for char in answer:
            word[1] = [i if i == char else j for i, j in zip(word[0], word[1])]
        return (word, tries, repiat_answer)
    return (word, tries - 1, repiat_answer)

def get_answer(word, tries, repiat_answer):
    answer = input_answer(repiat_answer)
    repiat_answer.append(answer)
    return check_answer(word, answer, tries, repiat_answer)

def play(word):
    tries = 9
    repiat_answer = list()
    print('Давайте играть в угадайку слов!')
    while tries >= 0:
        statistics(word, tries)
        if not tries or not any([i == '_' for i in word[1]]): break
        word, tries, repiat_answer = get_answer(word, tries, repiat_answer)
    print('Ура. Это победа.' if tries else f'Палач слишком хорош.\nЗагаданное слово {word[0]}.')

play(get_word())